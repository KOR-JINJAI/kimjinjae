# -*- coding: utf-8 -*-
"""
Created on Sun Sep 25 15:39:00 2022

@author: 98rla
"""

print(5)
print(-10)
print("ㅋㅋㅋㅋㅋ")
print("ㅋ"*5)

#%% boolean
print(5>10)
print(10>5)
print(True)
print(False)
print(not True)
print(not(5>10))
#%% 애완동물을 소개해 주세요~
print("우리집 강아지의 이름은 연탄이예요")
print("연탄이는 4살이며, 산책을 아주 좋아해요")
print("연탄이는 어른일까요? True")

#%% 변수선언
animal="곰돌"
name="연탄이"
age=4
hobby="산책"
is_adult= age>=3
print("우리집 "+animal+"의 이름은 "+name+"예요")
print(name,"는",str(age),"살이며,",hobby,"을 아주 좋아해요") ##정수를 str로 바꾸어야, 문자로 출력됨, +에서 ','로 바꾸면 띄어쓰기가 추가됨.
print(name +"는 어른일까요?" +str(is_adult))
#%%
print(1!=3)
print(not(1!=3))
print((3>0)and(3<5))
print((3>0)&(3<5))
print((3>0)and(3>5))
#%% 숫자처리함수
print(abs(-5)) #절대값
print(pow(4,2)) #4^2
print(max(5,12)) #최댓값
print(min(5,12)) #최솟값
print(round(3.14)) #반올림
print(round(4.99))

#%% math 라이브러리
from math import *
print(floor(4.99)) #내림(바닥)
print(ceil(3.14)) #올림 (천장)
print(sqrt(16)) #제곱
#%% random함수
from random import *
print(random()) #0.0<=x<1.0 임의의값 생성
print(random()*10) #0.0~10미만의 실
print(int(random()*10)) #0.0~10미만의 정수
#%%
# print(int(random()*10)+1)
# print(int(random()*10)+1)
# print(int(random()*10)+1)
# print(int(random()*10)+1)
# print(int(random()*45)+1) # 1이상 45이하
print(randrange(1,46)) #1이상 46미만
print(randint(1,45)) #randint는 1이상 45'이하'
#%% 문자열
sentence='나는 소년입니다'
print(sentence)
sentence2="파이썬은 쉬워요"
print(sentence2)
sentence3="""
나는 소년이고,
파이썬은 쉬워요
"""
print(sentence3)

#%% 슬라이싱 : 필요한 부분만 가져오기(행과 열 추출)
#주민번호
jumin="980905-1234567"
print("성별 : "+jumin[7])
print('연 : '+jumin[0:2]) #0이상 2미만까지=[0,1]
print("월 : "+ jumin[2:4]) #2이상 4미
print("일 : "+jumin[4:6])
print("생년월일 : "+jumin[0:6])
print("ㅅㄴㅇㅇ : "+jumin[:6])
print("뒤 7자리 : "+jumin[7:14])
print("뒤 7자리 : "+jumin[7::])
print("뒤 7자리 (뒤에부터) : "+ jumin[-7:])
#%% 문자열 처리함수
python="Python is Amazing"
# print(python)
# print(python.lower()) # 모든 문자 소문자
# print(python.upper()) #모든 문자 대문자
# print(python[0].isupper()) #첫쨰 문자가 대문자?
# print(len(python)) #문자열길이
# print(python.replace("Python","Java")) # 문자 바꾸기
index= python.index("n") #첫번째 n이 몇번째 칸에 들어가있는지 찾기=python.index
print(index)
index=python.index("n",index+1) #두번째 n이 몇번쨰 칸에 들어가있는지
print(index) # 0,1,2,3,4,5해서 15번째칸, 문자 갯수는 17개. g의 경우 0에서부터 새서 16번째문자이고, 전체문자갯수는 17
print(python.find("n"))
print(python.find("Java")) #python.find에 Java가 없으면 -1
# print(python.index("Java")) #python.index에서는 Java가없으면 에러
print(python.count("n"))

#%% 문자열 포맷 (신호기)
print("a"+"b")
print("a","b")
#방법 1
print("나는 %d살입니다."%20) # %d(정수)에 %뒤의 숫자를 가져옴
print("나는 %s을 좋아해요."% "파이썬") #%s :문자열
print("Apple은 %c로 시작해요." %"A") #문자하나.
# %s
print("나는 %s살입니다." % 20)
print("나느 %s색과 %s색을 좋아해요." %("파란","빨간")) # %뒤에 두개 이상 문자 넣

#방법2 : 중괄호
print("나는 {}살입니다." .format(20))
print('나는 {}색과 {}색을 좋아해요.'.format("파란","빨간"))
print('나는 {0}색과 {1}색을 좋아해요.'.format("파란","빨간"))
print('나는 {1}색과 {0}색을 좋아해요.'.format("파란","빨간")) # {0}=파란,{1}=빨간,//순서대로 순번을 받음.
print("나는 {age}살이며, {color}색을 좋아해요.".format(age=20,color="빨간"))
print("나는 {age}살이며, {color}색을 좋아해요.".format(color="빨간",age=20))
age=20
color= "빨간"
print(f"나는 {age}살이며, {color}색을 좋아해요.") #print(f)이용

print("백문이 불여일견 \n백견이 불여일타") #\n은 줄바
#저는 "나도코딩"입니다.
print("저는 \"나도코딩\"입니다.") # \"는 문장내에 큰따옴표 기
print("저는 \"김진재\"입니다")

#\\ : 문장내에서 하나의 \
print("C:\\Users\\98rla\\.spyder-py3")
# \r : 커서를 맨 앞으로 이동
print("Red Apple\rPine")
# \b : 백스페이스(한글자 삭제)
print("Redd\bApple")
print("Red\tApple")

#%% 리스트[]

# subway=[10, 20, 30]
# print(subway)

subway=["유재석","조세호","박명수"]
print(subway)
print(subway.index("조세호")) #1번째 칸
subway.append("하하")
print(subway)
#정형돈을 유재석과 조세호 사이에
subway.insert(1,"정형돈")
print(subway)
#지하철에 있는 사람을 한명씩 뒤에서 꺼냄
# print(subway.pop())
# print(subway)
# print(subway.pop())
# print(subway)
# print(subway.pop())
# print(subway)
subway.append("유재석")
print(subway)
print(subway.count("유재석"))

#%% 정렬하기
num_list=[5,2,4,3,1]
num_list.sort() # 리스트 정렬
print(num_list)
num_list.reverse() #리스트 역순
print(num_list)
# num_list.clear() #리스트 지우기
# print(num_list)

#%% 다양한 자료형과 함께 사용
mix_list=["조세호",20,True]
print(mix_list)

num_list.extend(mix_list) #리스트 합치기(뒤로)
print(num_list)

#%% 사전(Dictionary)
cabinet={3:"유재석",100:"김태호"}
print(cabinet[3]) #3번 캐비닛에 뭐가?
print(cabinet[100])
print(cabinet.get(3)) #이건 "소괄호"
# print(cabinet[5]) #캐비넷에 5가 없어서 hi를 못쓰고 끝남.
# print("hi")
print(cabinet.get(5)) #캐비넷에 5가 없어서 none을 뱉은 후, hi까지이어짐
print("hi")
print(cabinet.get(5,"사용가능")) #5가 있으면 5의 값을 뱉고 없으면 "사용가능"을 뱉는다.

print(3 in cabinet)
print(5 in cabinet)

#%% 문자형(str) Dictionary
cabinet={"A-3":"유재석","B-100":"김태호"}
print(cabinet["A-3"])
print(cabinet)
cabinet["A-3"]="김종국" #김종국으로 값을 업데이트
print(cabinet)

#간손님
# del cabinet["A-3"]
# print(cabinet)

#key 들만 출력
print(cabinet.keys())

#value들만 출력
print(cabinet.values())

#cabinet 값 모두지우기
# cabinet.clear()
# print(cabinet)

#%% 튜플 : 리스트랑 비슷한데 
#1. 크기 갱신 불가능
#2.속도가 빠름
menu=("돈까스","치즈까스") #튜플은소괄호
print(type(menu))
print(menu[0])
print(menu[1])

(name,age,hobby)=("김종국",40,"코딩")
print(name,age,hobby)
name="유재석"
print(name,age,hobby)

#%% 집합 set (중괄호)
#중복 안됨, 순서 없음
my_set={1,2,3,3,3}
print(my_set)
java={"유재석","김태호","양세형"}
python=set(["유재석","박명수"])
print(python)
#교집합
print(java&python)
print(java.intersection(python))
#합집합
print(java|python)
print(java.union(python)) #순서x
#차집합
print(java-python)
print(java.difference(python)) #difference는 차집합.

#python을 할줄아는사람이늘어남.
print(python)
python.add("김태호")
print(python)

#java를 까먹은사람이늘어남.
java.remove("김태호")
print(java)

#%%자료구조의 변경
menu={'커피','우유','주스'}
print(menu,type(menu)) #세트{중괄호}
menu=list(menu)
print(menu,type(menu))#리스트{대괄호}
menu=tuple(menu)
print(menu,type(menu))#튜플{소괄호}
menu=set(menu)
print(menu,type(menu))

#%% 셔플과샘플
from random import *
lst=[1,2,3,4,5]
print(lst)
shuffle(lst) #순서섞기
print(lst)
print(sample(lst,1)) #sample(리스트명,갯수)
users=range(1,21)
print(users,type(users))
users=list(users)
print(users,type(users))
for i in range(20):
    lst.append(i+1)
    
#%% 분기 : 코드의 분리

weather= input("오늘 날씨는 어떄요?") #input은 str형ㅂ
# if 조건:
#     실행명령문
if weather=="비"or weather=="눈":
    print("우산을 챙기세요")
elif weather=="미세먼지":
    print("마스크를 챙기세요")
else:
    print("준비물 필요 없어요.")
    
temp=int(input("기온은 어때요?"))
if 30<=temp:
    print("너무 덥다")
elif 10<=temp:
    print("괜찮은 날씨에요.")
elif 0<= temp:
    print("외투를 챙기세요.")
else:
    print("너무추워")

#%% for 문
# for waiting_no in [0,1,2,3,4]: #for문은 list만 받는다잉.
#     print("대기번호 : {0}".format(waiting_no))

# print("\n")
# for i in range(1,6):
#     print("대기번호 : {0}".format(i))
starbucks=["아이언맨","토르","그루트"]
for customer in starbucks:
    print("{0}, 커피가 준비되었습니다.".format(customer))
    
#%% while문
customer="토르"
index=5
while index>=1: #참일때 실행
    print("{0},커피가 준비되었습니다. {1}번 남았어요.".format(customer,index))
    index-=1
    if index==0:
        print("커피는 폐기처분되었습니다.")

# 무한루프
# customer="아이언맨"
# index=1
# while True:
#     print("{0},커피가 준비되었습니다. 호출 {1}회".format(customer,index))
#     index+=1


#%% 멈추기
customer = "토르"
person="Unknown"
while person!= customer:
    print("{0}, 커피가 준비되었습니다.".format(customer))
    person=input("이름이 어떻게 되세요?")
    
#%% continue와 break
absent=[2,5] #결석
no_book=[7]
for student in range(1,11): #1,2,3,4,5,6,7,8,9,10
    if student in absent: #student가 absent에 포함된다면 True, True면 실행
        continue #continue 이후 문장 "모두" 스킵 후 다음for문으로
    elif student in no_book:
        print("오늘 수업 여기까지, {0}는 교무실로 따라와".format(student))
        break #반복문 탈출
    print("{0}, 책을 읽어봐".format(student))
    print("-----------")

#%% 한줄for문
students=[1,2,3,4,5]
print(students)
students=[i+100 for i in students] #students의 원소값 i들에게 모두 100씩 ㄷ해라
print(students)

#학생 이름을 길이로 변환
students=["Iron man","Thor","I am groot"]
students=[len(i)for i in students]
print(students)

#학생이름 대문자로
students=["Iron man","Thor","I am groot"]
students=[i.upper() for i in students]
print(students)

#%% 함수정의
def open_account():
    print('새로운 계좌가 생성되었습니다.')
    
def deposit(balance,money):
    print("입금이 완료되었습니다. 잔액은 {0}원 입니다.".format(balance+money))
    return balance + money
def withdraw(balance,money):
    if balance>=money:
        print("출금이 완료되었습니다. 잔액은 {0}원입니다.".format(balance-money))
        return balance-money
    else:
        print("출금이 완료되지 않았습니다. 잔액은 {0}원입니다.".format(balance))
        return(balance)
def withdraw_night(balance,money):
    commission=100
    return commission,balance-money-commission

balance=0
money=int(input())
balance=deposit(balance,money)
balance=withdraw(balance,500)

commission,balance=withdraw_night(balance,500) #withdraw_night는 값 2개를 반환
print("수수료는{0}원이며, 잔액은{1}원입니다.".format(commission,balance))


#%% 기본값 :함수에 기본값을 설정하여, 별도 설정 없을시 기본값 반환


# def profile(name,age,main_lang):
#     print("이름: {0}\t나이:{1}\t주 사용 언어:{2}"\
#           .format(name,age,main_lang)) #줄바꿈 : \+enter
# profile("유재석",20,"파이썬")
# profile("김태호",20,"자바")

def profile(name,age=17,main_lang="파이썬"):
    print("이름: {0}\t나이:{1}\t주 사용 언어:{2}"\
          .format(name,age,main_lang)) #줄바꿈 : \+enter
        

profile("유재석")
profile("김태호")

#%% 키워드값 : def된 함수의 호출값을 이용해, 순서와 관계없이 함수에 input해도 알맞은 값을 반환
#def의 키워드에 해당하는 문자를 함수호출시 사용
def profile(name, age, main_lang):
    print(name,age,main_lang)

profile(name="유재석",main_lang="파이썬",age=20)
profile(main_lang="자바",age=25,name="김태호")

#%% 가변인자 활용

# def profile(name,age,lang1,lang2,lang3,lang4,lang5):
#     print("이름 : {0}\t나이{1}\t".format(name,age),end=" ") #end=" "를 활용시 print 후 자동줄바꿈 방지
#     print(lang1,lang2,lang3,lang4,lang5)

# profile("유재석",20,"python","C","C++","Java","C#")
# profile("김태호",25,"Kotlin","swift","","","")
def profile(name,age,*language): # *을 이용해서, language가 많아도 다 profile함수에 넣을 수 있음.
    print("이름 : {0}\t나이{1}\t".format(name,age),end=" ") #end=" "를 활용시 print 후 자동줄바꿈 방지
    for lang in language:
        print(lang,end=" ")
    print()

profile("유재석",20,"python","C","C++","Java","C#","R","matlab")
profile("김태호",25,"Kotlin","swift","","","")


#%% 지역변수와 전역변수
gun=10

def checkpoint(soldiers):#경계근무
    global gun #global : 함수 외부(전역)에 있는 변수(gun)를 사용
    gun = gun - soldiers
    print("[함수 내] 남은 총:{0}".format(gun))

def checkpoint_ret(gun,soldiers):
    gun =gun - soldiers
    print("[함수 내]남은 총 : {0}".format(gun))
    return gun
print("전체 총 : {0}".format(gun))
checkpoint(2)
print("남은 총 : {0}".format(gun))
gun=checkpoint_ret(gun,4)
print("남은 총 : {0}".format(gun))
#%%

#%% Quiz6 std sol

def std_weight(height,gender):
    if gender =='남자':
        return height*height*22
        
    else:
        return height*height*21
height=175
gender="남자"
weight= round(std_weight(height/100,gender),2) #round(숫자,소숫점몇째자리)
print("키 {0}cm {1}의 표준 체중은 {2}kg 입니다.".format(height,gender,weight))
