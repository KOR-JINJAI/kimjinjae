#mysol#1

food_times = list(map(int, input().split()))
k = int(input())
count = 0
result=0
while count <= k:
    for i in range(len(food_times)):
        if count == k:
            result=i+1
            break
        if food_times[i] >= 1:
            food_times[i] -= 1
            count += 1
    if result!=0:
        break

    if sum(food_times) == 0:
        result = -1
        break

print(result)

#mysol #2
def solution(food_times, k):
    count = 0
    answer = 0
    while count <= k:
        for i in range(len(food_times)): #for i in range(len(list)) <-리스트 원소 수를 range에 맞추기 위해 integer로 변환할 때 정석적 방식 len(list)+range(len()) 
            if sum(food_times) == 0:
                answer = -1
                break
            if food_times[i] >= 1:
                if count == k:
                    answer = i + 1
                    break
                food_times[i] -= 1
                count += 1
        if answer != 0:
            break

    return answer  # def선언 후 리턴은 한칸 들여쓴다.

food_times = list(map(int, input().split()))
k = int(input())

result = solution(food_times, k)
print(result)

#std sol
import heapq

def solution(food_times, k):
    if sum(food_times)<=k:
        return -1
    q=[]
    for i in range(len(food_times)):
        heapq.heappush(q,(food_times[i],i+1))
        
    sum_value=0
    previous=0
    length=len(food+times)
    while sum_value + ((q[0][0]-previous)*length)<=k:
        now=heapq.heapop(q)[0]
        sum_value +=(now-previous)*length
        previous=now
    
    result=sorted(q,key=lambda x :x[1])
    return result[(k-sum_value)%length][1]
